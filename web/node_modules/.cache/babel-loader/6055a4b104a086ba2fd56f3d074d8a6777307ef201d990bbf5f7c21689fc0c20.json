{"ast":null,"code":"import { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:8080/query'\n});\nconst authLink = setContext((_, _ref) => {\n  let {\n    headers\n  } = _ref;\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : \"\"\n    }\n  };\n});\nconst Client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache'\n    },\n    query: {\n      fetchPolicy: 'no-cache'\n    }\n  }\n});\nexport const CachedClient = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-first'\n    },\n    query: {\n      fetchPolicy: 'cache-first'\n    }\n  }\n});\nexport default Client;","map":{"version":3,"names":["ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","httpLink","uri","authLink","_","_ref","headers","token","localStorage","getItem","authorization","Client","link","concat","cache","defaultOptions","watchQuery","fetchPolicy","query","CachedClient"],"sources":["/Users/mklfarha/Desktop/caparks/ca_parks/web/src/client.js"],"sourcesContent":["import { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:8080/query',\n});\n\nconst authLink = setContext((_, { headers }) => {  \n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token');  \n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst Client = new ApolloClient({\n  link: authLink.concat(httpLink),  \n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache',\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n    },\n  }\n});\n\nexport const CachedClient = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-first',\n    },\n    query: {\n      fetchPolicy: 'cache-first',\n    },\n  }\n});\n\nexport default Client "],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,EAAEC,cAAc,EAAEC,cAAc,QAAQ,gBAAgB;AAC5F,SAASC,UAAU,QAAQ,6BAA6B;AAExD,MAAMC,QAAQ,GAAGF,cAAc,CAAC;EAC9BG,GAAG,EAAE;AACP,CAAC,CAAC;AAEF,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAC,EAAAC,IAAA,KAAkB;EAAA,IAAhB;IAAEC;EAAQ,CAAC,GAAAD,IAAA;EACzC;EACA,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C;EACA,OAAO;IACLH,OAAO,EAAE;MACP,GAAGA,OAAO;MACVI,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAC,GAAG;IAC7C;EACF,CAAC;AACH,CAAC,CAAC;AAEF,MAAMI,MAAM,GAAG,IAAIf,YAAY,CAAC;EAC9BgB,IAAI,EAAET,QAAQ,CAACU,MAAM,CAACZ,QAAQ,CAAC;EAC/Ba,KAAK,EAAE,IAAIjB,aAAa,EAAE;EAC1BkB,cAAc,EAAE;IACdC,UAAU,EAAE;MACVC,WAAW,EAAE;IACf,CAAC;IACDC,KAAK,EAAE;MACLD,WAAW,EAAE;IACf;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAME,YAAY,GAAG,IAAIvB,YAAY,CAAC;EAC3CgB,IAAI,EAAET,QAAQ,CAACU,MAAM,CAACZ,QAAQ,CAAC;EAC/Ba,KAAK,EAAE,IAAIjB,aAAa,EAAE;EAC1BkB,cAAc,EAAE;IACdC,UAAU,EAAE;MACVC,WAAW,EAAE;IACf,CAAC;IACDC,KAAK,EAAE;MACLD,WAAW,EAAE;IACf;EACF;AACF,CAAC,CAAC;AAEF,eAAeN,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}