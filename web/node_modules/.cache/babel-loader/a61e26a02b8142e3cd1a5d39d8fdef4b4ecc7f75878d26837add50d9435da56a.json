{"ast":null,"code":"var _jsxFileName = \"/Users/mklfarha/Desktop/caparks/ca_parks/web/src/components/SearchEntity.js\";\nimport React from 'react';\nimport AsyncSelect from 'react-select/async';\nimport Client from '../client';\nimport { gql } from '@apollo/client';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const searchQueries = new Map();\nexport const queriesByID = new Map();\nexport const searchFields = new Map();\nsearchQueries.set(\"park\", gql`\n                query SearchPark($query: String!, $limit: Int, $offset: Int) {\n                    SearchPark(query:$query, limit:$limit, offset:$offset){ \n                        id,\n                        name,\n                        main_image,\n                        phone,\n                        hours,\n                        allows_dogs,\n                        links{\n                            type,link,\n                        },\n                        status,\n                        created_at,\n                        updated_at,\n                        recreation_area_id,\n                        user_id,\n                    }\n                }\n            `);\nqueriesByID.set(\"park\", gql`\n    query ParkByID($id: ID!) {\n                    ParkByID(id:$id){ \n                        id,\n                        name,\n                        main_image,\n                        phone,\n                        hours,\n                        allows_dogs,\n                        links{\n                            type,link,\n                        },\n                        status,\n                        created_at,\n                        updated_at,\n                        recreation_area_id,\n                        user_id,\n                    }\n                }\n    `);\nsearchFields.set(\"park\", item => {\n  var res = '';\n  res = item.name;\n  return res;\n});\nsearchQueries.set(\"recreation_area\", gql`\n                query SearchRecreationArea($query: String!, $limit: Int, $offset: Int) {\n                    SearchRecreationArea(query:$query, limit:$limit, offset:$offset){ \n                        id,\n                        name,\n                        status,\n                        created_at,\n                        updated_at,\n                        user_id,\n                    }\n                }\n            `);\nqueriesByID.set(\"recreation_area\", gql`\n    query RecreationAreaByID($id: ID!) {\n                    RecreationAreaByID(id:$id){ \n                        id,\n                        name,\n                        status,\n                        created_at,\n                        updated_at,\n                        user_id,\n                    }\n                }\n    `);\nsearchFields.set(\"recreation_area\", item => {\n  var res = '';\n  res = item.name;\n  return res;\n});\nsearchQueries.set(\"feature\", gql`\n                query SearchFeature($query: String!, $limit: Int, $offset: Int) {\n                    SearchFeature(query:$query, limit:$limit, offset:$offset){ \n                        id,\n                        name,\n                        status,\n                        created_at,\n                        updated_at,\n                        user_id,\n                    }\n                }\n            `);\nqueriesByID.set(\"feature\", gql`\n    query FeatureByID($id: ID!) {\n                    FeatureByID(id:$id){ \n                        id,\n                        name,\n                        status,\n                        created_at,\n                        updated_at,\n                        user_id,\n                    }\n                }\n    `);\nsearchFields.set(\"feature\", item => {\n  var res = '';\n  res = item.name;\n  return res;\n});\nexport class SearchEntity extends React.Component {\n  constructor(props) {\n    var _props$value;\n    super(props);\n    this.state = {\n      entityIdentifier: props.entityIdentifier,\n      entityName: props.entityName,\n      searchInput: \"\",\n      value: props.value\n    };\n    if ((_props$value = props.value) !== null && _props$value !== void 0 && _props$value.value) {\n      this.loadByID();\n    }\n    this.state.ref = /*#__PURE__*/React.createRef();\n  }\n  loadByID() {\n    if (!queriesByID.has(this.state.entityIdentifier)) {\n      console.log(\"query id not found : \" + this.state.entityIdentifier);\n      return;\n    }\n    Client.query({\n      query: queriesByID.get(this.state.entityIdentifier),\n      variables: {\n        id: this.state.value.value\n      }\n    }).then(result => {\n      var data = result.data[this.state.entityName + \"ByID\"];\n      if (data.length > 0) {\n        var fieldsFunc = searchFields.get(this.state.entityIdentifier);\n        this.state.value.label = fieldsFunc(data[0]);\n        this.setState(this.state);\n      }\n    });\n  }\n  loadOptions(inputValue, callback) {\n    if (!searchQueries.has(this.state.entityIdentifier)) {\n      console.log(\"query not found : \" + this.state.entityIdentifier);\n      return;\n    }\n    Client.query({\n      query: searchQueries.get(this.state.entityIdentifier),\n      variables: {\n        query: this.state.searchInput,\n        limit: 10,\n        offset: 0\n      }\n    }).then(result => {\n      var data = result.data[\"Search\" + this.state.entityName];\n      var fieldsFunc = searchFields.get(this.state.entityIdentifier);\n      var items = data.map(function (item) {\n        return {\n          value: item.id,\n          label: fieldsFunc(item)\n        };\n      });\n      callback(items);\n    }).catch(err => {\n      toast.error('Error searching entity', {\n        position: toast.POSITION.TOP_CENTER\n      });\n      console.error(err);\n    });\n  }\n  handleInputChange(newValue) {\n    this.state.searchInput = newValue;\n    this.setState(this.state);\n    return newValue;\n  }\n  clearValue() {\n    this.state.value = \"\";\n    this.setState(this.state);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(AsyncSelect, {\n        onChange: data => {\n          this.state.value = data;\n          this.props.onChange(data, this.state.entityIdentifier);\n        },\n        placeholder: this.props.placeholder,\n        isClearable: true,\n        escapeRemoves: true,\n        cacheOptions: true,\n        loadOptions: (inputValue, callback) => this.loadOptions(inputValue, callback),\n        defaultOptions: true,\n        onInputChange: newValue => this.handleInputChange(newValue),\n        value: this.state.value,\n        components: {\n          IndicatorSeparator: () => null\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","AsyncSelect","Client","gql","toast","jsxDEV","_jsxDEV","searchQueries","Map","queriesByID","searchFields","set","item","res","name","SearchEntity","Component","constructor","props","_props$value","state","entityIdentifier","entityName","searchInput","value","loadByID","ref","createRef","has","console","log","query","get","variables","id","then","result","data","length","fieldsFunc","label","setState","loadOptions","inputValue","callback","limit","offset","items","map","catch","err","error","position","POSITION","TOP_CENTER","handleInputChange","newValue","clearValue","render","children","onChange","placeholder","isClearable","escapeRemoves","cacheOptions","defaultOptions","onInputChange","components","IndicatorSeparator","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/mklfarha/Desktop/caparks/ca_parks/web/src/components/SearchEntity.js"],"sourcesContent":["import React from 'react'\nimport AsyncSelect from 'react-select/async';\nimport Client from '../client'\nimport {gql} from '@apollo/client';\nimport { toast } from 'react-toastify';\n\nexport const searchQueries = new Map();\nexport const queriesByID = new Map();\nexport const searchFields = new Map();\n\nsearchQueries.set(\"park\", gql`\n                query SearchPark($query: String!, $limit: Int, $offset: Int) {\n                    SearchPark(query:$query, limit:$limit, offset:$offset){ \n                        id,\n                        name,\n                        main_image,\n                        phone,\n                        hours,\n                        allows_dogs,\n                        links{\n                            type,link,\n                        },\n                        status,\n                        created_at,\n                        updated_at,\n                        recreation_area_id,\n                        user_id,\n                    }\n                }\n            `)\nqueriesByID.set(\"park\", gql`\n    query ParkByID($id: ID!) {\n                    ParkByID(id:$id){ \n                        id,\n                        name,\n                        main_image,\n                        phone,\n                        hours,\n                        allows_dogs,\n                        links{\n                            type,link,\n                        },\n                        status,\n                        created_at,\n                        updated_at,\n                        recreation_area_id,\n                        user_id,\n                    }\n                }\n    `\n)\nsearchFields.set(\"park\", (item) => { var res = ''; res = item.name;return res;})\nsearchQueries.set(\"recreation_area\", gql`\n                query SearchRecreationArea($query: String!, $limit: Int, $offset: Int) {\n                    SearchRecreationArea(query:$query, limit:$limit, offset:$offset){ \n                        id,\n                        name,\n                        status,\n                        created_at,\n                        updated_at,\n                        user_id,\n                    }\n                }\n            `)\nqueriesByID.set(\"recreation_area\", gql`\n    query RecreationAreaByID($id: ID!) {\n                    RecreationAreaByID(id:$id){ \n                        id,\n                        name,\n                        status,\n                        created_at,\n                        updated_at,\n                        user_id,\n                    }\n                }\n    `\n)\nsearchFields.set(\"recreation_area\", (item) => { var res = ''; res = item.name;return res;})\nsearchQueries.set(\"feature\", gql`\n                query SearchFeature($query: String!, $limit: Int, $offset: Int) {\n                    SearchFeature(query:$query, limit:$limit, offset:$offset){ \n                        id,\n                        name,\n                        status,\n                        created_at,\n                        updated_at,\n                        user_id,\n                    }\n                }\n            `)\nqueriesByID.set(\"feature\", gql`\n    query FeatureByID($id: ID!) {\n                    FeatureByID(id:$id){ \n                        id,\n                        name,\n                        status,\n                        created_at,\n                        updated_at,\n                        user_id,\n                    }\n                }\n    `\n)\nsearchFields.set(\"feature\", (item) => { var res = ''; res = item.name;return res;})\n\nexport class SearchEntity extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            entityIdentifier: props.entityIdentifier,\n            entityName: props.entityName,\n            searchInput:\"\",\n            value: props.value,            \n        }   \n\n        if (props.value?.value) {\n            this.loadByID()\n        }\n\n        this.state.ref = React.createRef();\n                 \n    }\n\n    loadByID(){\n        if (!queriesByID.has(this.state.entityIdentifier)){\n            console.log(\"query id not found : \"+this.state.entityIdentifier)\n            return \n        }\n\n        Client\n            .query({\n                query: queriesByID.get(this.state.entityIdentifier),\n                variables:{\n                    id:this.state.value.value,                                       \n                }\n            })\n            .then((result) => {  \n                var data = result.data[this.state.entityName + \"ByID\"]\n                if (data.length > 0) {\n                    var fieldsFunc = searchFields.get(this.state.entityIdentifier)\n                    this.state.value.label = fieldsFunc(data[0])\n                    this.setState(this.state)\n                }\n            })\n\n    }\n\n    loadOptions(inputValue, callback){\n        if (!searchQueries.has(this.state.entityIdentifier)){\n            console.log(\"query not found : \"+this.state.entityIdentifier)\n            return \n        }\n        Client\n            .query({\n                query: searchQueries.get(this.state.entityIdentifier),\n                variables:{\n                    query:this.state.searchInput,    \n                    limit:10,\n                    offset:0,                    \n                }\n            })\n            .then((result) => {                \n                var data = result.data[\"Search\"+this.state.entityName]                \n                var fieldsFunc = searchFields.get(this.state.entityIdentifier)\n                var items = data.map(function(item) {\n                    return {\n                        value:item.id,\n                        label:fieldsFunc(item)\n                    };\n                });\n                callback(items)                                                                 \n            })\n            .catch((err) => {\n                toast.error('Error searching entity',{\n                        position: toast.POSITION.TOP_CENTER\n                });\n                console.error(err);\n            });\n    }\n\n    handleInputChange(newValue){        \n        this.state.searchInput = newValue\n        this.setState(this.state)\n        return newValue;\n    };\n\n    clearValue() {\n        this.state.value = \"\"\n        this.setState(this.state)\n    }\n\n    render() {\n        return (\n            <div>                \n                <AsyncSelect\n                    onChange={(data) => {\n                        this.state.value = data\n                        this.props.onChange(data, this.state.entityIdentifier)\n                    } }\n                    placeholder={this.props.placeholder}\n                    isClearable={true}\n                    escapeRemoves={true}                   \n                    cacheOptions\n                    loadOptions={(inputValue, callback) => this.loadOptions(inputValue, callback)}\n                    defaultOptions\n                    onInputChange={(newValue) => this.handleInputChange(newValue)}\n                    value={this.state.value}                    \n                    components={ {\n                            IndicatorSeparator: () => null\n                        } }\n                    />\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}