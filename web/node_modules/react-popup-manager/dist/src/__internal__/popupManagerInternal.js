"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PopupManagerInternal = void 0;
var generateGuid_1 = require("../utils/generateGuid");
var PopupItem_1 = require("./PopupItem");
var CLOSED_POPUPS_THRESHOLD = 10;
var PopupManagerInternal = /** @class */ (function () {
    function PopupManagerInternal() {
        var _this = this;
        this.openPopups = [];
        this._closedPopups = [];
        this.onPopupsChangeEvents = [];
        this.open = function (componentClass, popupProps) {
            if (popupProps && popupProps.isOpen !== undefined) {
                throw new Error("it is not allowed to send 'isOpen' in popupProps to 'popupManager.open(component, popupProps)'");
            }
            var guid = generateGuid_1.generateGuid();
            var newPopupItem = new PopupItem_1.PopupItem(componentClass, popupProps, guid);
            _this.openPopups.push(newPopupItem);
            _this.callPopupsChangeEvents();
            return {
                close: function () { return _this.close(guid); },
            };
        };
        this.closeAll = function () {
            _this.openPopups.forEach(function (popup) {
                popup.close();
                _this.closedPopups.unshift(popup);
            });
            _this.openPopups = [];
            _this.callPopupsChangeEvents();
        };
    }
    PopupManagerInternal.prototype.callPopupsChangeEvents = function () {
        this.onPopupsChangeEvents.forEach(function (cb) { return cb(); });
    };
    Object.defineProperty(PopupManagerInternal.prototype, "closedPopups", {
        get: function () {
            this._closedPopups.length = Math.min(this._closedPopups.length, CLOSED_POPUPS_THRESHOLD);
            return this._closedPopups;
        },
        enumerable: false,
        configurable: true
    });
    PopupManagerInternal.prototype.subscribeOnPopupsChange = function (callback) {
        this.onPopupsChangeEvents.push(callback);
    };
    Object.defineProperty(PopupManagerInternal.prototype, "popups", {
        get: function () {
            return __spreadArrays(this.openPopups, this.closedPopups);
        },
        enumerable: false,
        configurable: true
    });
    PopupManagerInternal.prototype.close = function (popupGuid) {
        var currentPopupIndex = this.openPopups.findIndex(function (_a) {
            var guid = _a.guid;
            return guid === popupGuid;
        });
        if (currentPopupIndex === -1) {
            return;
        }
        var currentPopup = this.openPopups[currentPopupIndex];
        currentPopup.close();
        var closedPopup = this.openPopups.splice(currentPopupIndex, 1)[0];
        this.closedPopups.unshift(closedPopup);
        this.callPopupsChangeEvents();
    };
    return PopupManagerInternal;
}());
exports.PopupManagerInternal = PopupManagerInternal;
//# sourceMappingURL=popupManagerInternal.js.map