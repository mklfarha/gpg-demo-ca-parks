// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: inserts.sql

package ca_parksdb

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const insertEvent = `-- name: InsertEvent :execresult
INSERT INTO event
(id,name,description,main_image,start_date,end_date,status,created_at,updated_at,park_id,user_id)
VALUES
(?,?,?,?,?,?,?,?,?,?,?)
`

type InsertEventParams struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	MainImage   string    `json:"main_image"`
	StartDate   time.Time `json:"start_date"`
	EndDate     time.Time `json:"end_date"`
	Status      int32     `json:"status"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	ParkID      string    `json:"park_id"`
	UserID      string    `json:"user_id"`
}

func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertEvent,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.MainImage,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ParkID,
		arg.UserID,
	)
}

const insertFeature = `-- name: InsertFeature :execresult
INSERT INTO feature
(id,name,status,created_at,updated_at,user_id)
VALUES
(?,?,?,?,?,?)
`

type InsertFeatureParams struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Status    int32     `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	UserID    string    `json:"user_id"`
}

func (q *Queries) InsertFeature(ctx context.Context, arg InsertFeatureParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertFeature,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
}

const insertPark = `-- name: InsertPark :execresult
INSERT INTO park
(id,name,main_image,phone,hours,allows_dogs,links,status,created_at,updated_at,recreation_area_id,user_id)
VALUES
(?,?,?,?,?,?,?,?,?,?,?,?)
`

type InsertParkParams struct {
	ID               string          `json:"id"`
	Name             string          `json:"name"`
	MainImage        string          `json:"main_image"`
	Phone            string          `json:"phone"`
	Hours            string          `json:"hours"`
	AllowsDogs       bool            `json:"allows_dogs"`
	Links            json.RawMessage `json:"links"`
	Status           int32           `json:"status"`
	CreatedAt        time.Time       `json:"created_at"`
	UpdatedAt        time.Time       `json:"updated_at"`
	RecreationAreaID string          `json:"recreation_area_id"`
	UserID           string          `json:"user_id"`
}

func (q *Queries) InsertPark(ctx context.Context, arg InsertParkParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertPark,
		arg.ID,
		arg.Name,
		arg.MainImage,
		arg.Phone,
		arg.Hours,
		arg.AllowsDogs,
		arg.Links,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RecreationAreaID,
		arg.UserID,
	)
}

const insertParkHasFeature = `-- name: InsertParkHasFeature :execresult
INSERT INTO park_has_feature
(id,details,status,created_at,updated_at,park_id,feature_id)
VALUES
(?,?,?,?,?,?,?)
`

type InsertParkHasFeatureParams struct {
	ID        string    `json:"id"`
	Details   string    `json:"details"`
	Status    int32     `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	ParkID    string    `json:"park_id"`
	FeatureID string    `json:"feature_id"`
}

func (q *Queries) InsertParkHasFeature(ctx context.Context, arg InsertParkHasFeatureParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertParkHasFeature,
		arg.ID,
		arg.Details,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ParkID,
		arg.FeatureID,
	)
}

const insertRecreationArea = `-- name: InsertRecreationArea :execresult
INSERT INTO recreation_area
(id,name,status,created_at,updated_at,user_id)
VALUES
(?,?,?,?,?,?)
`

type InsertRecreationAreaParams struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Status    int32     `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	UserID    string    `json:"user_id"`
}

func (q *Queries) InsertRecreationArea(ctx context.Context, arg InsertRecreationAreaParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertRecreationArea,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
}

const insertUser = `-- name: InsertUser :execresult
INSERT INTO user
(id,name,email,password,status,created_at,updated_at)
VALUES
(?,?,?,?,?,?,?)
`

type InsertUserParams struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	Status    int32     `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}
